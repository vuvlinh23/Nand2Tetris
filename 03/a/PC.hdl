// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:

    // Plus one from last output
    Inc16(in=outReg, out=outPlus1);

    // If reset or load or inc == 1 then load = 1
    Or(a=reset, b=load, out=resetOrLoad);
    Or(a=resetOrLoad, b=inc, out=resetOrLoadorInc);

    // We can look at Mux8Way16Bit's truth table and
    // treat 3 bit reset, load, inc as 3bit selector
    // the priority: reset > load > inc
    Mux8Way16(a=outReg, b=false, c=in, d=false, e=outPlus1, f=false, g=in, h=false, sel[0]=reset, sel[1]=load, sel[2]=inc, out=inOfReg);

    Register(in=inOfReg, load=resetOrLoadorInc, out=out, out=outReg);
    
}
